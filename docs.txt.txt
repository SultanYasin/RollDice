  const numbers = [1,2,3,4,5,6,7,8,9,10];
  //this is how to get a random valu from an array
  const x  =Math.ceil(Math.random()* numbers.length)
  console.log(x);
  function randomNumber() {
    
  }

_____________________________________________________________________________


  this how to pick up a number of the array 

  const thingsArray = ['thing1' , 'thing2 '];
  const mappedThings = thingsArray.map(thing => console.log(thing))

  this is how to add a new things to the array following to the number of items inside the array
   
    const thingsArray = ['thing1' , 'thing2 '];
  
    function addItem(){
    const newThings = " tihing " + thingsArray.length+1;
    thingsArray.push(newThings);
    console.log(thingsArray);
  }




    //  const [count , setCount] = React.useState(0)
  //setCount takes new value as a parameter (x , y )
  // x can be the new value of Count // whenever I dont need the previous value of state
  // y is the callback function that returns the new value of count //whenever I need to use
   the previous value of state and update it
   _____________________________________________________________________________

   changable things ->         const [isGoingOut , setIsGoingOut] = React.useState(false);
function changeMind(){
  setIsGoingOut(prev=> !prev)
}
  
        <div className='q'>
          <h2>going out?</h2>
          <h3>Answer : {isGoingOut ? "yes" : "no"}</h3>
          <button onClick={changeMind}>change</button>


        </div>

        add things to array and make changes ->
                  <button onClick={changeMind}>change</button>
          const [thingsA , setThingsA]= React.useState(['thing1' , 'thing2 ']);
function addItemsToArray (){setThingsA(previous => [...previous , `things${thingsA.length + 1}`])}
function removeItemsFromArray (){setThingsA(previous => [...previous.slice(0, -1)])}
const newItems = thingsA.map(thing =><p key={thing}>{ thing }</p>)
          <button onClick={addItemsToArray}>add</button>
          <button onClick={removeItemsFromArray}>remove</button>
          <p>{newItems}</p>
        


_____________________________________________________________________________

this  how to change one of the value in an object
const [personInfo , setPersonInfo] = React.useState({
  firstName : "Sultan" ,
  lastName : "al-haj" , 
  age :30 ,
  isMarried : true
});

function isFavorit(){ return setPersonInfo(prev => ({...prev , isMarried : !prev.isMarried}))}}

let married = personInfo.isMarried ? "isMArried == true : false 

_____________________________________________________________________________
 this is how to change the discription of a button to toggle between show & hide
 <button onClick={function} > {isShown ? "Hide" : "show"} punshLine </button>

 _____________________________________________________________________________

this is how to get the value from the form in react 

import React from "react"

export default function Form() {
    const [formData, setFormData] = React.useState(
        {firstName: "", lastName: ""}
    )
    
    console.log(formData)
    
    function handleChange(event) {
        setFormData(prevFormData => {
            return {
                ...prevFormData,
                [event.target.name]: event.target.value
            }
        })
    }
    
    return (
        <form>
            <input
                type="text"
                placeholder="First Name"
                onChange={handleChange} 
                name="firstName" this one I must have to give the value that I write to the right input area
                value={formData.firstName} // if I do not use it -> I get an error that sayes my input has not been controlled
            />
          
        </form>
    )
}

        
 _____________________________________________________________________________
 
 this is how to get the value from  the form regardless of it was a text type or checkbox type ..


 import React from "react";

/*
this is how the input form works in react apps
*/

export default function InputForm() {
    const [formData , setFormData] = React.useState({
        topText: "",
        bottomText: "",
        Email: "",
        isFriendly: true,
    })

    function handleChange(event){
      const {name , value , type , checked} = event.target;
      setFormData(prevData => {
        return {...prevData ,[name] : type === "checkbox" ? checked : value  }}) }

        [name] : type -- this means key & value
        type === "checkbox" ? checked : value  -- this is a terrnary operator

  return (
    <div>
        <form>
            <input type="text" placeholder="Top text"  onChange={handleChange} name="inputT" value={formData.topText} />
            <input type="text" placeholder="bottom text"  onChange={handleChange}  name="inputB" value={formData.bottomText} />
            <input type="Email" placeholder="Email"  onChange={handleChange} name="inputE"  value={formData.Email} />

            <input type="checkbox" id="isFriendly" onChange={handleChange} name="isFriendly"  checked={formData.isFriendly} />
            <label htmlFor="isFriendly">Are you friendly?</label>
        </form>
    </div>
  )
}



 _____________________________________________________________________________

this is how to controll the radio buttons

import React from "react"

export default function Form() {
    const [formData, setFormData] = React.useState(
        {
            firstName: "", 
            lastName: "", 
            email: "", 
            comments: "", 
            isFriendly: true,
            employment: ""
        }
    )
    console.log(formData.employment)
    
    function handleChange(event) {
        const {name, value, type, checked} = event.target
        setFormData(prevFormData => {
            return {
                ...prevFormData,
                [name]: type === "checkbox" ? checked : value
            }
        })
    }
    
    return (
        <form>
            <input
                type="text"
                placeholder="First Name"
                onChange={handleChange}
                name="firstName"
                value={formData.firstName}
            />
            <input
                type="text"
                placeholder="Last Name"
                onChange={handleChange}
                name="lastName"
                value={formData.lastName}
            />
            <input
                type="email"
                placeholder="Email"
                onChange={handleChange}
                name="email"
                value={formData.email}
            />
            <textarea 
                value={formData.comments}
                placeholder="Comments"
                onChange={handleChange}
                name="comments"
            />
            <input 
                type="checkbox" 
                id="isFriendly" 
                checked={formData.isFriendly}
                onChange={handleChange}
                name="isFriendly"
            />
            <label htmlFor="isFriendly">Are you friendly?</label>
            <br />
            <br />
            
            <fieldset>
                <legend>Current employment status</legend>
                
                <input 
                    type="radio"
                    id="unemployed"
                    name="employment"
                    value="unemployed"
                    checked={formData.employment === "unemployed"}
                    onChange={handleChange}
                />
                <label htmlFor="unemployed">Unemployed</label>
                <br />
                
                <input 
                    type="radio"
                    id="part-time"
                    name="employment"
                    value="part-time"
                    checked={formData.employment === "part-time"}
                    onChange={handleChange}
                />
                <label htmlFor="part-time">Part-time</label>
                <br />
                
                <input 
                    type="radio"
                    id="full-time"
                    name="employment"
                    value="full-time"
                    checked={formData.employment === "full-time"}
                    onChange={handleChange}
                />
                <label htmlFor="full-time">Full-time</label>
                <br />
                
            </fieldset>
        </form>
    )
}




 _____________________________________________________________________________



form with submit button
import React from "react"

export default function Form() {
    const [formData, setFormData] = React.useState(
        {
            firstName: "", 
            lastName: "", 
            email: "", 
            comments: "", 
            isFriendly: true,
            employment: "",
            favColor: ""
        }
    )
    
    function handleChange(event) {
        const {name, value, type, checked} = event.target
        setFormData(prevFormData => {
            return {
                ...prevFormData,
                [name]: type === "checkbox" ? checked : value
            }
        })
    }
    
    function handleSubmit(event) {
        event.preventDefault()
        // submitToApi(formData)
        console.log(formData)
    }
    
    return (
        <form onSubmit={handleSubmit}>
            <input
                type="text"
                placeholder="First Name"
                onChange={handleChange}
                name="firstName"
                value={formData.firstName}
            />
            <input
                type="text"
                placeholder="Last Name"
                onChange={handleChange}
                name="lastName"
                value={formData.lastName}
            />
            <input
                type="email"
                placeholder="Email"
                onChange={handleChange}
                name="email"
                value={formData.email}
            />
            <textarea 
                value={formData.comments}
                placeholder="Comments"
                onChange={handleChange}
                name="comments"
            />
            <input 
                type="checkbox" 
                id="isFriendly" 
                checked={formData.isFriendly}
                onChange={handleChange}
                name="isFriendly"
            />
            <label htmlFor="isFriendly">Are you friendly?</label>
            <br />
            <br />
            
            <fieldset>
                <legend>Current employment status</legend>
                <input 
                    type="radio"
                    id="unemployed"
                    name="employment"
                    value="unemployed"
                    checked={formData.employment === "unemployed"}
                    onChange={handleChange}
                />
                <label htmlFor="unemployed">Unemployed</label>
                <br />
                
                <input 
                    type="radio"
                    id="part-time"
                    name="employment"
                    value="part-time"
                    checked={formData.employment === "part-time"}
                    onChange={handleChange}
                />
                <label htmlFor="part-time">Part-time</label>
                <br />
                
                <input 
                    type="radio"
                    id="full-time"
                    name="employment"
                    value="full-time"
                    checked={formData.employment === "full-time"}
                    onChange={handleChange}
                />
                <label htmlFor="full-time">Full-time</label>
                <br />
            </fieldset>
            <br />
            
            <label htmlFor="favColor">What is your favorite color?</label>
            <br />
            <select 
                id="favColor" 
                value={formData.favColor}
                onChange={handleChange}
                name="favColor"
            >
                <option value="red">Red</option>
                <option value="orange">Orange</option>
                <option value="yellow">Yellow</option>
                <option value="green">Green</option>
                <option value="blue">Blue</option>
                <option value="indigo">Indigo</option>
                <option value="violet">Violet</option>
            </select>
            <br />
            <br />
            <button>Submit</button>
        </form>
    )
}


 _____________________________________________________________________________


THIS IS THE FORM IN REAL WORLD WITH SUBMIT BUTTON 

import React from "react"

export default function App() {
    const [formData, setFormData] = React.useState({
        email: "",
        password: "",
        passwordConfirm: "",
        joinedNewsletter: true
    })
    
    /**
     * Challenge: Connect the form to local state
     * 
     * 1. Create a state object to store the 4 values we need to save.
     * 2. Create a single handleChange function that can
     *    manage the state of all the inputs and set it up
     *    correctly
     * 3. When the user clicks "Sign up", check if the 
     *    password & confirmation match each other. If
     *    so, log "Successfully signed up" to the console.
     *    If not, log "passwords do not match" to the console.
     * 4. Also when submitting the form, if the person checked
     *    the "newsletter" checkbox, log "Thanks for signing
     *    up for our newsletter!" to the console.
     */
    
    function handleChange(event) {
        const {name, value, type, checked} = event.target
        setFormData(prevFormData => ({
            ...prevFormData,
            [name]: type === "checkbox" ? checked : value
        }))
    }
    
    function handleSubmit(event) {
        event.preventDefault()
        if(formData.password === formData.passwordConfirm) {
            console.log("Successfully signed up")
        } else {
            console.log("Passwords do not match")
            return
        }
        
        if(formData.joinedNewsletter) {
            console.log("Thanks for signing up for our newsletter!")
        }
    }
    
    return (
        <div className="form-container">
            <form className="form" onSubmit={handleSubmit}>
                <input 
                    type="email" 
                    placeholder="Email address"
                    className="form--input"
                    name="email"
                    onChange={handleChange}
                    value={formData.email}
                />
                <input 
                    type="password" 
                    placeholder="Password"
                    className="form--input"
                    name="password"
                    onChange={handleChange}
                    value={formData.password}
                />
                <input 
                    type="password" 
                    placeholder="Confirm password"
                    className="form--input"
                    name="passwordConfirm"
                    onChange={handleChange}
                    value={formData.passwordConfirm}
                />
                
                <div className="form--marketing">
                    <input
                        id="okayToEmail"
                        type="checkbox"
                        name="joinedNewsletter"
                        onChange={handleChange}
                        checked={formData.joinedNewsletter}
                    />
                    <label htmlFor="okayToEmail">I want to join the newsletter</label>
                </div>
                <button 
                    className="form--submit"
                >
                    Sign up
                </button>
            </form>
        </div>
    )
}



-----------------------



   function handleSubmit(event) {
        event.preventDefault()
        if(formData.password === formData.passwordConfirm) {
            console.log("Successfully signed up")
        } else {
            console.log("Passwords do not match")
            return  -> the return in this place means that if the password dont match the user must return to the start point to make the password match
        }
 _____________________________________________________________________________




 _____________________________________________________________________________



 _____________________________________________________________________________



 _____________________________________________________________________________

 _____________________________________________________________________________

 fetch(www.fsdfs).then(res => res.json()).then(data => console.log(data))